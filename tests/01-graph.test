# Commands covered:  graph edge node
#
# This file contains a collection of tests for one or more of the Tcl
# built-in commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 2000 by Scriptics Corporation.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
    tcltest::configure -verbose {body pass start line error}
}
source [file join [file dirname [info script]] loadpackage.tcl]

#### fixtures
set createThreeNodes {
    graph create g
    node create n1
    node create n2
    node create n3
    set result {}
}
set destroyThreeNodes {
    catch { n1 destroy }
    catch { n2 destroy }
    catch { n3 destroy }
    catch { g destroy }
    unset -nocomplain result
}

set createTwoGraphs {
    foreach g {g1 g2} {graph create $g}
    foreach n {n1 n2 n3 n4} {node create $n}
    n1 configure -graph g1
    n2 configure -graph g1
    n3 configure -graph g2
    n4 configure -graph g2
}
set destroyTwoGraphs {
    g1 destroy -nodes
    g2 destroy -nodes
}
#### /fixtures

###

test graph-1.1 "create and destroy a graph" -setup {} -body {
    graph create g
    expr { [info command g] != {} }
} -cleanup {
    rename g {}
} -result {1}

###

test graph-1.2 "create graph with name" -setup {} -body {
    graph create g -name "Graf"
    g cget -name
} -cleanup {
    rename g {}
} -result {Graf}

###

test graph-addnode-1.1 "add node to graph via graph" -setup {
    graph create g
    node create n
} -body {
    g nodes + n
    g nodes get
} -cleanup {
    n destroy
    g destroy
} -result {n}

###

test graph-addnode-1.2 "add node to graph via graph" -setup {
    graph create g
    node create n1
    node create n2
    node create n3
} -body {
    g nodes + n1 n2 n3
    llength [g nodes get]
} -cleanup {
    n1 destroy
    n2 destroy
    n3 destroy
    g destroy
} -result {3}


###

test graph-addnode-and-destroy-1.3 "destroy graph destroys nodes with -nodes flag" -setup {
    graph create g
} -body {
    g nodes + [node new] [node new] [node new]
    lappend result [llength [g nodes get]]
    g destroy -nodes
    lappend result [info commands ::tclgraph::Node*]
} -cleanup {
    unset result
} -result {3 {}}

###

test graph-addnode-and-destroy-1.4.1 "destroy node from graph" -setup $createThreeNodes -body {
    g nodes + n1 n2 n3
    lappend result [llength [g nodes get]]
    n1 configure -graph {}
    lappend result [info commands n1] [llength [g nodes get]]
} -cleanup $destroyThreeNodes -result {3 n1 2}

###

test graph-addnode-and-destroy-1.4.2 "destroy node from graph 2" -setup $createThreeNodes -body {
    g nodes + n1 n2 n3
    lappend result [llength [g nodes get]]
    g nodes - n1 n2
    lappend result [g info nodes] [n1 cget -graph] [n2 cget -graph] [n3 cget -graph]
} -cleanup $destroyThreeNodes -result {3 n3 {} {} g}

###

test graph-getnodes-1.5.1 "add and get nodes" -setup $createThreeNodes -body {
    g nodes + n1 n2 n3
    lmap x {n1 n2 n3} { expr { $x in [g nodes get] } }
} -cleanup $destroyThreeNodes -result {1 1 1}

###

test graph-getnodes-1.5.2 "add and get nodes label 1" -setup $createThreeNodes -body {
    g nodes + n1 n2 n3
    lmap x {n1 n2 n3} { expr { $x in [g nodes get] } }
} -cleanup $destroyThreeNodes -result {1 1 1}

###

test graph-getnodes-1.5.3 "add and get nodes label 2" -setup $createThreeNodes -body {
    g nodes + n1 n2 n3
    n2 labels + hello world foo bar
    n3 labels + blubb hi
    g nodes get -label world
} -cleanup $destroyThreeNodes -result n2

###

test graph-getnodes-1.5.4 "add and get nodes label 3" -setup $createThreeNodes -body {
    g nodes + n1 n2 n3
    n1 labels + world tu jours
    n2 labels + hello world foo bar
    n3 labels + blubb hi
    g nodes get -notlabel world
} -cleanup $destroyThreeNodes -result n3

###

test graph-getnodes-1.5.5 "add and get nodes label 4" -setup $createThreeNodes -body {
    g nodes + n1 n2 n3
    n2 labels + hello world foo bar
    n3 labels + blubb hi
    g nodes get -notlabel hi world
} -cleanup $destroyThreeNodes -result n1

###

test graph-getnodes-1.5.6 "add and get nodes label 5" -setup $createThreeNodes -body {
    g nodes + n1 n2 n3
    n1 labels + world tu jours
    n2 labels + hello world foo bar
    n3 labels + blubb hi
    g nodes get -notlabel hi world
} -cleanup $destroyThreeNodes -result {}

###

test graph-info-1.6.1 "info nodes 1" -setup $createThreeNodes -body {
    g nodes + n1 n2 n3
    lmap x {n1 n2 n3} { expr { $x in [g info nodes] } }
} -cleanup $destroyThreeNodes -result {1 1 1}

###

test graph-getnodes-1.6.2 "info nodes 2" -setup $createThreeNodes -body {
    g nodes + n1 n2 n3
    n1 labels + world tu jours
    n2 labels + hello world foo bar
    n3 labels + blubb hi
    g info nodes -notlabel hi world
} -cleanup $destroyThreeNodes -result {}

###

test graph-getnodes-1.6.3 "info nodes by name" -setup $createThreeNodes -body {
    g nodes + n1 n2 n3
    n1 configure -name hello
    n2 configure -name world
    n3 configure -name bla
    g info nodes -name hello
} -cleanup $destroyThreeNodes -result {n1}

###

test graph-getnodes-1.6.4 "info nodes by name error" -setup $createThreeNodes -body {
    g nodes + n1 n2 n3
    n1 configure -name hello
    n2 configure -name world
    n3 configure -name bla
    g info nodes -name
} -cleanup $destroyThreeNodes -returnCodes error -result {wrong # args: should be "-name name"}

###

test graph-delta-1.7.1 "info delta 1" -setup $createTwoGraphs -body {
    edge new n1 -> n3
    g1 info delta+
} -cleanup $destroyTwoGraphs -result n3

###

test graph-delta-1.7.2 "info deltaminus 1" -setup $createTwoGraphs -body {
    edge new n1 <- n3
    g1 info deltaminus
} -cleanup $destroyTwoGraphs -result n3

###

test graph-delta-1.7.3 "info delta 2" -setup $createTwoGraphs -body {
    edge new n1 -> n2
    edge new n1 -> n3
    g1 info deltaplus
} -cleanup $destroyTwoGraphs -result n3

###

test graph-delta-1.7.4 "info deltaminus 2" -setup $createTwoGraphs -body {
    edge new n1 -> n2
    edge new n1 <- n3
    g1 info deltaminus
} -cleanup $destroyTwoGraphs -result n3

###

test graph-slave-interp-1.8.1 "create and destroy graph + nodes in slave interp" -setup {} -body {
    interp create slave
    interp eval slave [list set argv $argv]
    interp eval slave {source [file join tests loadpackage.tcl]}
    interp eval slave {source [file join tests createtwographs.tcl]}
    interp delete slave
} -cleanup {} -result {}

###

test graph-order-1.9.1 "info order 1" -setup $createThreeNodes -body {
    foreach {n} {n1 n2 n3} {
    	$n configure -graph g
    }
    g info order
} -cleanup $destroyThreeNodes -result 3

###

test graph-order-1.9.2 "info order 2 0 before anything" -setup $createThreeNodes -body {
    g info order
} -cleanup $destroyThreeNodes -result 0

###

test graph-order-1.9.2 "info order 3: 0 after node add/subtract" -setup $createThreeNodes -body {
    lappend result [g info order]
    foreach {n} {n1 n2 n3} {
    	$n configure -graph g
    }
    lappend result [g info order]
    g nodes - n1 n2 n3
    lappend result [g info order]
} -cleanup $destroyThreeNodes -result {0 3 0}

# cleanup
::tcltest::cleanupTests
return
