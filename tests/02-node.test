## node.test (created by Tloona here)

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
}
#tcltest::configure -verbose {pass}
source [file join [file dirname [info script]] loadpackage.tcl]

#### fixtures
set createTwoNodes {
    graph create g
    graph create g2
    node create n1
    node create n2
    set result {}
}

set deleteTwoNodes {
    catch {n1 delete}
    catch {n2 delete}
    catch {g delete}
    catch {g2 delete}
    unset -nocomplain result
}

set createThreeNodes {
    graph create g
    node create n1
    node create n2
    node create n3
    set result {}
}
set deleteThreeNodes {
    catch { n1 delete }
    catch { n2 delete }
    catch { n3 delete }
    catch { g delete }
    unset -nocomplain result
}

#### fixtures

###

test node-cmd-2.1.1 "create node via create" -setup {} -body {
    node create n
    info command n
} -cleanup {
    rename n {}
} -result n

###

test node-cmd-2.1.2 "create node via new" -setup {} -body {
    set n [node new]
    llength [info command $n]
} -cleanup {
    rename $n {}
} -result 1

###

test node-cmd-2.2.1 "delete node via node cmd" -setup {} -body {
    node create n -name "Note"
    lappend result [info commands n]
    node delete n
    lappend result [info commands n]
} -cleanup {unset result} -result {n {}}

###

test node-addtograph-2.3.1 "add node to graph via cmd" -setup {
    graph create g
    node create n
} -body {
    node configure n -graph g
    g nodes get
} -cleanup {
    n delete
    g delete
} -result {n}

###

test node-addtograph-2.3.2 "add node to graph via node" -setup {
    graph create g
    node create n
} -body {
    n configure -graph g
    g nodes get
} -cleanup {
    n delete
    g delete
} -result {n}

###

test node-addtograph-2.3.3 "add node to graph via node, retrieval via cmd" -setup {
    graph create g
    node create n
} -body {
    node config n -graph g
    node info n graph
} -cleanup {
    n delete
    g delete
} -result g

###

test node-addtograph-2.3.4 "add node to graph, retrieve via node" -setup {
    graph create g1
    graph create g2
    node create n
} -body {
    n config -graph g1
    n info graph
} -cleanup {
    n delete
    g1 delete
    g2 delete
} -result {g1}
###

test node-addtograph-and-delete-2.4.1 "add and delete node removes node from graph" -setup $createTwoNodes -body {
    n1 config -graph g
    n2 config -graph g
    n1 delete
    g nodes get
} -cleanup $deleteTwoNodes -result {n2}

###

test node-addtograph-and-delete-2.4.2 "add and delete node leaves empty graph" -setup $createTwoNodes -body {
    n1 configure -graph g
    lappend result [g info nodes]
    n1 configure -graph g2
    lappend result [g info nodes] [g2 info nodes]
    n1 configure -graph {}
    lappend result [g2 info nodes]
} -cleanup $deleteTwoNodes -result {n1 {} n1 {}}

###

test node-addtograph-and-delete-2.4.3 "change graph for node" -setup $createTwoNodes -body {
    n1 configure -graph g
    n2 configure -graph g
    lappend result [llength [g nodes get]]
    n1 delete
    n2 delete
    lappend result [g info nodes]
} -cleanup $deleteTwoNodes -result {2 {}}

###

test node-label-2.5.1 "add label via cmd" -setup $createTwoNodes -body {
    node labels n1 + mylab yourlab
    node labels n1
} -cleanup $deleteTwoNodes -result {mylab yourlab}

###

test node-label-2.5.2 "add label via node" -setup $createTwoNodes -body {
    n1 labels + mylab yourlab
    n1 labels
} -cleanup $deleteTwoNodes -result {mylab yourlab}

###

test node-label-2.5.3 "remove label via cmd" -setup $createTwoNodes -body {
    node labels n1 + mylab yourlab
    set result [node labels n1]
    node labels n1 - mylab
    lappend result [node labels n1]
} -cleanup $deleteTwoNodes -result {mylab yourlab yourlab}

###

test node-label-2.5.4 "remove label via node" -setup $createTwoNodes -body {
    n1 labels + mylab yourlab
    set result [n1 labels]
    n1 labels - mylab
    lappend result [n1 labels]
} -cleanup $deleteTwoNodes -result {mylab yourlab yourlab}

###

test node-label-2.5.5 "remove all label via cmd" -setup $createTwoNodes -body {
    node labels n1 + mylab yourlab
    set result [node labels n1]
    node labels n1 - yourlab mylab
    lappend result [node labels n1]
} -cleanup $deleteTwoNodes -result {mylab yourlab {}}

###

test node-neighbors-2.6.1.1 "get neighbors" -setup $createTwoNodes -body {
    edge create e n1 -> n2
    n1 info deltaplus
} -cleanup $deleteTwoNodes -result n2

###

test node-neighbors-2.6.1.2 "get neighbors 2" -setup $createThreeNodes -body {
    edge new n1 -> n2
    edge new n1 -> n3
    lmap x {n2 n3} { expr { $x in [n1 info delta+] } }
} -cleanup $deleteThreeNodes -result {1 1}

###

test node-neighbors-2.6.1.3 "get neighbors 3" -setup $createThreeNodes -body {
    edge new n1 -> n2
    edge new n1 -> n3
    lmap x {n2 n3} { expr { $x in [n1 info delta+ -all] } }
} -cleanup $deleteThreeNodes -result {1 1}

###

test node-neighbors-2.6.1.4 "get neighbors wron args" -setup $createThreeNodes -body {
    edge new n1 -> n2
    edge new n1 -> n3
    n1 info delta+ -xxx
} -cleanup $deleteThreeNodes -returnCodes error \
    -result {bad option "-xxx": must be -name, -labels, -notlabels, or -all}

###

test node-neighbors-2.6.2.1 "get neighbors with label 1" -setup $createThreeNodes -body {
    edge new n1 -> n2
    edge new n1 -> n3
    n2 labels + hello world foo bar
    n3 labels + blubb hi
    n1 info deltaplus -labels world
} -cleanup $deleteThreeNodes -result n2

###

test node-neighbors-2.6.2.2 "get neighbors with label 2" -setup $createThreeNodes -body {
    edge new n1 -> n2
    edge new n1 -> n3
    n2 labels + hello world foo bar
    n3 labels + blubb world
    n1 info deltaplus -labels world foo
} -cleanup $deleteThreeNodes -result n2

###

test node-neighbors-2.6.2.3 "get neighbors with label 3" -setup $createThreeNodes -body {
    edge new n1 -> n2
    edge new n1 -> n3
    n2 labels + hello world foo bar
    n3 labels + blubb world
    lmap x {n2 n3} { expr { $x in [n1 info delta+ -labels world] } }
} -cleanup $deleteThreeNodes -result {1 1}

###

test node-neighbors-2.6.3.1 "neighbors without label 1" -setup $createThreeNodes -body {
    edge new n1 -> n2
    edge new n1 -> n3
    n2 labels + hello world foo bar
    n3 labels + blubb hi
    n1 info deltaplus -notlabel world
} -cleanup $deleteThreeNodes -result n3

###

test node-neighbors-2.6.3.2 "neighbors without label 2" -setup $createThreeNodes -body {
    edge new n1 -> n2
    edge new n1 -> n3
    n2 labels + hello world foo bar
    n3 labels + blubb hi
    n1 info deltaplus -notlabel world blubb
} -cleanup $deleteThreeNodes -result {}

###

test node-neighbors-2.6.3.3 "neighbors without label 3" -setup $createThreeNodes -body {
    edge new n1 -> n2
    edge new n1 -> n3
    n2 labels + hello world foo bar
    n3 labels + blubb world
    n1 info delta+ -notlabel world
} -cleanup $deleteThreeNodes -result {}

###

test node-info-2.7.1.1 "node info delta + via node" -setup $createThreeNodes -body {
    edge new n1 -> n2
    edge new n1 -> n3
    lmap x {n2 n3} { expr { $x in [n1 info delta+] } }
} -cleanup $deleteThreeNodes -result {1 1}

###

test node-info-2.7.1.2 "node info delta + via node cmd" -setup $createThreeNodes -body {
    edge new n1 -> n2
    edge new n1 -> n3
    lmap x {n2 n3} { expr { $x in [node info n1 delta+] } }
} -cleanup $deleteThreeNodes -result {1 1}

###

test node-info-2.7.2.1 "node info delta - via node" -setup $createThreeNodes -body {
    edge new n1 <- n2
    edge new n1 <- n3
    concat [n2 info delta+] [n3 info delta+] \
        [lmap x {n2 n3} { expr { $x in [n1 info delta-] } }]
} -cleanup $deleteThreeNodes -result {n1 n1 1 1}

###

test node-info-2.7.2.2 "node info delta - via node cmd" -setup $createThreeNodes -body {
    edge new n1 <- n2
    edge new n1 <- n3
    concat [node info n2 delta+] [node info n3 delta+] \
        [lmap x {n2 n3} { expr { $x in [node info n1 delta-] } }]
} -cleanup $deleteThreeNodes -result {n1 n1 1 1}

###

test node-info-2.7.3.1 "node info delta with labels via node cmd" -setup $createThreeNodes -body {
    edge new n1 -> n2
    edge new n1 -> n3
    n2 labels + hello world foo bar
    n3 labels + hello
    node info n1 delta+ -labels hello foo 
} -cleanup $deleteThreeNodes -result {n2}

###

test node-info-2.7.3.2 "node info delta with notlabels" -setup $createThreeNodes -body {
    edge new n1 -> n2
    edge new n1 -> n3
    n2 labels + hello world foo bar
    n3 labels + hello
    list [n1 info delta+ -notlabels foo] [n1 info delta+ -notlabels hello]
} -cleanup $deleteThreeNodes -result {n3 {}}

###

test node-info-2.7.4.1 "node info delta with name" -setup $createThreeNodes -body {
    edge new n1 -> n2
    edge new n1 -> n3
    n2 configure -name hello
    n3 configure -name world
    list [n1 info delta+ -name hello] [n1 info delta+ -name world] [n1 info deltaplus -name foo]
} -cleanup $deleteThreeNodes -result {n2 n3 {}}

###

test node-info-2.7.4.1 "node info delta with name raise error" -setup $createThreeNodes -body {
    edge new n1 -> n2
    edge new n1 -> n3
    n2 configure -name hello
    n3 configure -name world
    node info n1 deltaplus -name
} -cleanup $deleteThreeNodes -returnCodes error -result {wrong # args: should be "-name name"}
# cleanup

::tcltest::cleanupTests
return
