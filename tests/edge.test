## edge.test (created by Tloona here)

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
}
#tcltest::configure -verbose {pass}

if {$tcl_platform(platform) eq "windows"} {
    load tclgraphs.dll
}

package require tclgraphs
namespace import tclgraphs::*

#### fixtures
set createTwoNodes {
    node n1
    node n2
}

set deleteTwoNodes {
    n1 delete
    n2 delete
}

#### fixtures
###

test edge-create-1.1 "create edge via edge command" -setup $createTwoNodes -body {
    edge create e n1 -> n2
} -cleanup {
    e delete
    n1 delete
    n2 delete
} -result {e}

###

test edge-create-1.2 "create edge via node and new" -setup {
    node n1
    node n2
} -body {
    set e [n1 -> n2 new]
    llength [info command $e] 
} -cleanup $deleteTwoNodes -result {1}

###

test edge-create-1.3 "create edge via node and create" -setup {
    node n1
    node n2
} -body {
    n1 -> n2 create e
} -cleanup {
    e delete
    n1 delete
    n2 delete
} -result {e}

###

test edge-create-1.4 "create edge via node, new and arguments" -setup {
    node n1
    node n2
} -body {
    set e [n1 -> n2 new -weight 2]
    list [llength [info command $e]] [$e cget -weight] 
} -cleanup {
    $e delete
    n1 delete
    n2 delete
} -result {1 2.0}

###

test edge-create-1.5 "create edge via node, create and arguments" -setup {
    node n1
    node n2
} -body {
    n1 -> n2 create e -weight 2.5
    list [info commands e] [e cget -weight]
} -cleanup {
    e delete
    n1 delete
    n2 delete
} -result {e 2.5}

###

test edge-create-1.6 "create undirected edge via edge command" -setup {
    node n1
    node n2
} -body {
    edge create e n1 - n2
} -cleanup {
    e delete
    n1 delete
    n2 delete
} -result {e}

###

test edge-create-1.7 "create undirected edge via edge command and arguments" -setup {
    node n1
    node n2
} -body {
    edge create e n1 - n2 -weight 2.5 -name Etch
    list [info commands e] [e cget -weight] [e cget -name]
} -cleanup {
    e delete
    n1 delete
    n2 delete
} -result {e 2.5 Etch}

###

test edge-delete-1.1 "edge is deleted when node 1 is deleted" -setup {
    node n1
    node n2
    n1 -> n2 create e
} -body {
    n1 delete
    info commands e
} -cleanup {
    n2 delete
} -result {}

###

tcltest::test edge-cmd-1.1 "edge command create" -setup $createTwoNodes -body {
    edge create e n1 -> n2
} -cleanup $deleteTwoNodes -result {e}

###

tcltest::test edge-cmd-1.2 "edge command new" -setup $createTwoNodes -body {
    set e [edge new n1 -> n2]
    llength [info commands $e]
} -cleanup $deleteTwoNodes -result 1

###

tcltest::test edge-cmd-1.3 "edge command configure" -setup $createTwoNodes -body {
    edge create e n1 -> n2
    edge configure n1 -> n2 -weight 2.3 -name hello
    list [e cget -weight] [e cget -name]
} -cleanup $deleteTwoNodes -result {2.3 hello}

###

tcltest::test edge-cmd-1.4 "edge command cget" -setup $createTwoNodes -body {
    edge create e n1 -> n2 -weight 2.3 -name hello
    list [e cget -weight] [e cget -name]
} -cleanup $deleteTwoNodes -result {2.3 hello}

###

tcltest::test edge-cmd-1.5 "edge command get through nodes" -setup $createTwoNodes -body {
    edge create e n1 -> n2 -weight 2.3 -name hello
    edge get n1 -> n2
} -cleanup $deleteTwoNodes -result e

###

tcltest::test edge-cmd-1.6 "edge command get through cmd" -setup $createTwoNodes -body {
    edge create e n1 -> n2 -weight 2.3 -name hello
    edge get e
} -cleanup $deleteTwoNodes -result e

# cleanup
::tcltest::cleanupTests
return
