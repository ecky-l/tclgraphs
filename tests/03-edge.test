## edge.test (created by Tloona here)

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
}
tcltest::configure -verbose {pass}

if {$tcl_platform(platform) eq "windows"} {
    load tclgraphs.dll
}

package require tclgraphs
namespace import tclgraphs::*

#### fixtures
set createTwoNodes {
    node create n1
    node create n2
}

set deleteTwoNodes {
    catch {n1 delete}
    catch {n2 delete}
}

#### fixtures
###

test edge-create-3.1.1 "create edge via edge command" -setup $createTwoNodes -body {
    edge create e n1 -> n2
} -cleanup {
    e delete
    n1 delete
    n2 delete
} -result {e}

###

test edge-create-3.1.2 "create undirected edge via edge command" -setup $createTwoNodes -body {
    edge create e n1 <-> n2
} -cleanup {
    catch {e delete}
    n1 delete
    n2 delete
} -result {e}

###

test edge-create-3.1.3 "create edge w wrong direction raises" -setup $createTwoNodes -body {
    edge create e n1 - n2
} -cleanup {
    catch {e delete}
    n1 delete
    n2 delete
} -returnCodes error -result {Not a valid edge direction: "-". Must be ->, <- or <->}

###

test edge-create-3.1.3 "create undirected edge via edge command and arguments" -setup $createTwoNodes -body {
    edge create e n1 <-> n2 -weight 2.5 -name Etch
    list [info commands e] [e cget -weight] [e cget -name]
} -cleanup {
    e delete
    n1 delete
    n2 delete
} -result {e 2.5 Etch}

###

test edge-delete-3.2 "edge is deleted when node 1 is deleted" -setup {
    node create n1
    node create n2
    edge create e n1 -> n2
} -body {
    n1 delete
    info commands e
} -cleanup {
    n2 delete
} -result {}

###

tcltest::test edge-cmd-3.3.1 "edge command create" -setup $createTwoNodes -body {
    edge create e n1 -> n2
} -cleanup $deleteTwoNodes -result {e}

###

tcltest::test edge-cmd-3.3.2 "edge command new" -setup $createTwoNodes -body {
    set e [edge new n1 -> n2]
    llength [info commands $e]
} -cleanup $deleteTwoNodes -result 1

###

tcltest::test edge-cmd-3.4.1 "edge command configure through nodes" -setup $createTwoNodes -body {
    edge create e n1 -> n2
    edge configure n1 -> n2 -weight 2.3 -name hello
    list [e cget -weight] [e cget -name]
} -cleanup $deleteTwoNodes -result {2.3 hello}

###

tcltest::test edge-cmd-3.4.2 "edge command configure through command" -setup $createTwoNodes -body {
    edge create e n1 -> n2
    edge configure e -weight 2.3 -name hello
    list [e cget -weight] [e cget -name]
} -cleanup $deleteTwoNodes -result {2.3 hello}

###

tcltest::test edge-cmd-3.5.1 "edge command cget through nodes" -setup $createTwoNodes -body {
    edge create e n1 -> n2 -weight 2.3 -name hello
    list [e cget -weight] [e cget -name]
} -cleanup $deleteTwoNodes -result {2.3 hello}

###

tcltest::test edge-cmd-3.5.2 "edge command cget through command" -setup $createTwoNodes -body {
    edge create e n1 -> n2 -weight 2.3 -name hello
    list [edge cget e -weight] [edge cget e -name]
} -cleanup $deleteTwoNodes -result {2.3 hello}
###

tcltest::test edge-cmd-3.6.1 "edge command get through nodes" -setup $createTwoNodes -body {
    edge create e n1 -> n2 -weight 2.3 -name hello
    edge get n1 -> n2
} -cleanup $deleteTwoNodes -result e

###

tcltest::test edge-cmd-3.6.2 "edge command get through cmd" -setup $createTwoNodes -body {
    edge create e n1 -> n2 -weight 2.3 -name hello
    edge get e
} -cleanup $deleteTwoNodes -result e

###

tcltest::test edge-cmd-3.7.1 "edge command delete through cmd" -setup $createTwoNodes -body {
    edge create e n1 -> n2 -weight 2.3 -name hello
    edge delete e
    info commands e
} -cleanup $deleteTwoNodes -result {}

###

tcltest::test edge-direction-3.8.1 "create out edge" -setup $createTwoNodes -body {
    edge create e n1 -> n2
    list [n1 neighbors] [n2 neighbors]
} -cleanup $deleteTwoNodes -result {n2 {}}

###

tcltest::test edge-direction-3.8.2 "create in edge" -setup $createTwoNodes -body {
    edge create e n1 <- n2
    list [n1 neighbors] [n2 neighbors]
} -cleanup $deleteTwoNodes -result {{} n1}

###

tcltest::test edge-direction-3.8.3 "create undirected edge" -setup $createTwoNodes -body {
    edge create e n1 <-> n2
    list [n1 neighbors] [n2 neighbors]
} -cleanup $deleteTwoNodes -result {n2 n1}

###

tcltest::test edge-delete-3.9.1 "create and delete edge" -setup $createTwoNodes -body {
    edge create e n1 -> n2
    set result [list [n1 neighbors] [n2 neighbors]]
    edge delete e
    lappend result [n1 neighbors]
} -cleanup $deleteTwoNodes -result {n2 {} {}}

###

tcltest::test edge-delete-3.9.2 "create edge and delete toNode" -setup $createTwoNodes -body {
    edge create e n1 -> n2
    set result [n1 neighbors]
    node delete n2
    lappend result [n1 neighbors]
} -cleanup $deleteTwoNodes -result {n2 {}}

###

tcltest::test edge-delete-3.9.3 "create edge and delete fromNode" -setup $createTwoNodes -body {
    edge create e n1 -> n2
    set result [n1 neighbors]
    node delete n1
    lappend result [info command e]
} -cleanup $deleteTwoNodes -result {n2 {}}

###

tcltest::test edge-cget-3.10.1 "cget -weight" -setup $createTwoNodes -body {
    edge create e n1 -> n2 -weight 2.3
    e cget -weight
} -cleanup $deleteTwoNodes -result 2.3

###

tcltest::test edge-cget-3.10.2 "cget -name" -setup $createTwoNodes -body {
    edge create e n1 -> n2 -name Etch
    edge cget e -name
} -cleanup $deleteTwoNodes -result Etch

###

tcltest::test edge-cget-3.10.3 "cget -from" -setup $createTwoNodes -body {
    edge create e n1 -> n2
    e cget -from
} -cleanup $deleteTwoNodes -result n1

###

tcltest::test edge-cget-3.10.4 "cget -to" -setup $createTwoNodes -body {
    edge create e n1 -> n2
    edge cget e -to
} -cleanup $deleteTwoNodes -result n2

###

tcltest::test edge-cget-3.10.5 "cget -undirected flag for directed" -setup $createTwoNodes -body {
    edge create e n1 -> n2
    edge cget e -undirected
} -cleanup $deleteTwoNodes -result 0

###

tcltest::test edge-cget-3.10.6 "cget -undirected flag for undirected" -setup $createTwoNodes -body {
    edge create e n1 <-> n2
    edge cget e -undirected
} -cleanup $deleteTwoNodes -result 1

###

tcltest::test edge-labels-3.11.1 "add labels" -setup $createTwoNodes -body {
    edge create e n1 <-> n2
    edge labels e + hello world bla
    lmap x {hello world bla} { expr { $x in [edge labels e] } }
} -cleanup $deleteTwoNodes -result {1 1 1}

###

tcltest::test edge-labels-3.11.2 "add and remove labels" -setup $createTwoNodes -body {
    edge create e n1 -> n2
    edge labels e + hello world bla
    set result [lmap x {hello world bla} { expr { $x in [edge labels e] } }]
    edge labels e - world
    concat $result [lmap x {hello world bla} { expr { $x in [edge labels e] } }]
} -cleanup $deleteTwoNodes -result {1 1 1 1 0 1}

###

tcltest::test edge-labels-3.11.3 "remove all labels" -setup $createTwoNodes -body {
    edge create e n1 -> n2
    edge labels e + hello world bla
    set result [lmap x {hello world bla} { expr { $x in [edge labels e] } }]
    edge labels e - world bla hello
    lappend result [e labels]
} -cleanup $deleteTwoNodes -result {1 1 1 {}}

# cleanup
::tcltest::cleanupTests
return
